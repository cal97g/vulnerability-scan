import typing
import celery
import requests
import logging
import kafka
import ipaddress
import orjson

from core import kafka
from core import exploit

def provide_celery(config: typing.Object) -> celery.Celery:
    app = celery.Celery(
        "tasks",
        broker=config.CELERY_BROKER,
        result_backend=config.CELERY_BROKER
    )

@celery.task()
def initialise_scan(cdir):
    for ip in [str(ip) for ip in ipaddress.IPv4Network(request.data["cidr"])]:
        http_available.delay("http://ip)

@celery.task()
def http_available(ip):
    success = []
    for url in ["http://{}:80", "https://{}:443"]:
        try:
            requests.get(url=url, timeout=2)
            success.append(url)
        except requests.exceptions.ExceptionError:
            continue

    if success:
        producer = kafka.give_producer()
        payload = exploit.QFP(
            has_https = bool("https" in "".join(success)),
            has_http = bool("http" in "".join(success)),
            tls_ver = "1.2",
            webserver = "nginx"
        )

        payload = {
            "qualifier_props": payload.to_dict()
        }

        for url in success:
            payload["url"] = url
            producer.send(config.KAFKA_HTTP_AVAILABLE_TOPIC, orjson.dumps(payload))

            check_vulnerability.delay(url)

        producer.flush()

@celery.task()
def check_vulnerability(url)
    log.info("checking vulnerabilities for {}".format(url)
    for exploit in exploits.__all__:
        exploit()
